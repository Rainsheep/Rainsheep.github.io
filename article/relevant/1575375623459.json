{"relevantArticles":[{"articleTitle":"IDAE记录","articleAbstractText":"快捷键 参考链接： Idea 快捷键大全    快捷键 功能     Ctrl+Y 删除光标所在行   Ctrl+D 复制光标所在行，插入光标位置下面   Ctrl+/ 单行注释，再按取消注释   Ctrl+Space 基本代码提示   Ctrl+O 覆盖重写方法   Ctrl+P 方法参数提示   Ctrl+N 查找类   Ctrl+左键 跳转到声明或用法   Ctrl+F12 显示当前文件的结构   Alt+Enter 导入包，自动修正代码   Alt+Insert 自动生成代码，toString，get，set 等方法   Shift+F6 重命名变量(所有此变量)   Alt+Shift+上下箭头 移动当前代码行   Ctrl+Shift+Space 智能代码提示   Ctrl+Shift+/ 注释选中代码，多行注释，再按取消注释   Ctrl + Shift + Enter 自动结束代码，行末自动添加分号   Ctrl + Alt + O 优化导入的类，可以对当前文件和整个包目录使用   Ctrl + Alt + 左键 跳转到实现   Ctrl+Alt+L 格式化代码   输....","articleStatus":0,"articlePermalink":"/articles/2020/01/07/1578385176961.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-02-16+13:28:06+p_20200216012802.png?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Java中List, Integer[], int[]的相互转换","articleAbstractText":"有时候 list和数组 int[]转换很麻烦。 List和 String[]也同理。难道每次非得写一个循环遍历吗？其实一步就可以搞定。 本文涉及到一些 Java8 的特性。如果没有接触过就先学会怎么用，然后再细细研究。 package package1; import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; import java.util.stream.Stream; public class Main { public static void main(String[] args) { int[] arr = {1, 2, 3, 4, 5}; // int[] 转 List&lt;Integer&gt;  List&lt;Integer&gt; list1 = Arrays.stream(arr).boxed().collect(Collectors.toList()); //1.调用Arrays.stream()将int[]变为IntStream流,注意不能用Stre....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575442558951.html","articleImg1URL":"https://img.hacpai.com/bing/20180101.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Emmet常用语法","articleAbstractText":"官方文档：https://docs.emmet.io/cheat-sheet  HTML 初始结构(!) 先输入！然后按 tab 生成基础结构  id(#)和 class(.)  div#test &lt;div id=\"test\"&gt;&lt;/div&gt; div.test &lt;div class=\"test\"&gt;&lt;/div&gt; form#search.wide &lt;form id=\"search\" class=\"wide\"&gt;&lt;/form&gt; p.class1.class2.class3 &lt;p class=\"class1 class2 class3\"&gt;&lt;/p&gt;  子节点(&gt;)，兄弟结点(+)，上级节点(^)  div&gt;ul&gt;li&gt;p  &lt;div&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;   div+ul+p  &lt;div&gt;&lt;/div&gt; &lt;....","articleStatus":0,"articlePermalink":"/articles/2020/01/01/1577858373027.html","articleImg1URL":"https://img.hacpai.com/file/2020/01/p20200101013412-55772897.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"邮票","articleAbstractText":"问题描述 　　给定一个信封，有 N（1≤ N≤100）个位置可以贴邮票，每个位置只能贴一张邮票。我们现在有 M(M&lt; =100)种不同邮资的邮票，面值为 X1,X2\u2026.Xm 分（Xi 是整数，1≤ Xi≤255），每种都有 N 张。 　　显然，信封上能贴的邮资最小值是 min(X1, X2, \u2026, Xm)，最大值是 N*max(X1, X2, \u2026,　　Xm)。由所有贴法得到的邮资值可形成一个集合（集合中没有重复数值），要求求出这个集合中是否存在从 1 到某个值的连续邮资序列，输出这个序列的 最大值。 　　例如，N=4，M=2，面值分别为 4 分，1 分，于是形成 1，2，3，4，5，6，7，8，9，10，12，13，16 的序列，而从 1 开始的连续邮资序列为 1，2，3，4，5，6，7，8，9，10，所以连续邮资序列的最大值为 10 分。 输入格式 　　第一行：最多允许粘贴的邮票张数 N；第二行：邮票种数 M；第三行：空格隔开的 M 个数字，表示邮票的面值 Xi。注意：Xi 序列不一定是大小有序的！ 输出格式 　　从 1 开始的连续邮资序列的最大值 MAX。若不存在从 1 分开....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575376583745.html","articleImg1URL":"https://img.hacpai.com/bing/20190309.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"hdu-2546 饭卡","articleAbstractText":"题目链接：hdu-2546 思路：DP[i][j]存的是 j 价格买 i 个物品最贵的价格，然后把二维变一维，第二层循环从后向前，依次覆盖上一层的 dp #include&lt;iostream&gt; #include&lt;algorithm&gt; #include&lt;cstring&gt; using namespace std; int dp[1005];//dp存的J价格在0~i物品中可以购买到的最大价格 int main() { int money,i,j,k,m,n,s[1005],t,temp,end,maxt,sum; while(cin&gt;&gt;n,n) { memset(dp,0,sizeof(dp)); for(i=1;i&lt;=n;i++) { cin&gt;&gt;s[i]; } sort(s+1,s+1+n); cin&gt;&gt;money; if(money&lt;5)//小于5元，直接输出  { end=money; } else { money=money-5;//5元买最贵的  for(i=1;i&lt;=n-1;i++) { f....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575374076393.html","articleImg1URL":"https://img.hacpai.com/bing/20190522.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}