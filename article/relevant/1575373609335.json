{"relevantArticles":[{"articleTitle":"分解质因子","articleAbstractText":"任何一个合数可以分解为几个质数的乘积，这些质数也必然是这个合数的约数。 超时模板： #include&lt;bits/stdc++.h&gt; using namespace std; vector&lt;int&gt; fun(int n) { vector&lt;int&gt; v; for (int i = 2; i &lt;= n; i++) { while (n%i == 0) { n /= i; v.push_back(i); } } return v; } int main() { int n; cin &gt;&gt; n; vector&lt;int&gt; v = fun(n); for (auto it = v.begin(); it != v.end(); it++) { cout &lt;&lt; *it &lt;&lt; \" \"; } }  优化模板： #include&lt;iostream&gt; #include&lt;vector&gt; #include&lt;cmath&gt; using namespace std; vector&lt;int....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440099127.html","articleImg1URL":"https://img.hacpai.com/bing/20180317.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"邮票","articleAbstractText":"问题描述 　　给定一个信封，有 N（1≤ N≤100）个位置可以贴邮票，每个位置只能贴一张邮票。我们现在有 M(M&lt; =100)种不同邮资的邮票，面值为 X1,X2\u2026.Xm 分（Xi 是整数，1≤ Xi≤255），每种都有 N 张。 　　显然，信封上能贴的邮资最小值是 min(X1, X2, \u2026, Xm)，最大值是 N*max(X1, X2, \u2026,　　Xm)。由所有贴法得到的邮资值可形成一个集合（集合中没有重复数值），要求求出这个集合中是否存在从 1 到某个值的连续邮资序列，输出这个序列的 最大值。 　　例如，N=4，M=2，面值分别为 4 分，1 分，于是形成 1，2，3，4，5，6，7，8，9，10，12，13，16 的序列，而从 1 开始的连续邮资序列为 1，2，3，4，5，6，7，8，9，10，所以连续邮资序列的最大值为 10 分。 输入格式 　　第一行：最多允许粘贴的邮票张数 N；第二行：邮票种数 M；第三行：空格隔开的 M 个数字，表示邮票的面值 Xi。注意：Xi 序列不一定是大小有序的！ 输出格式 　　从 1 开始的连续邮资序列的最大值 MAX。若不存在从 1 分开....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575376583745.html","articleImg1URL":"https://img.hacpai.com/bing/20190309.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"矩形的交面积","articleAbstractText":"矩形边平行 X 轴或 Y 轴 输入：矩形某对角线上两个点 输出：交面积 #include&lt;iostream&gt; #include&lt;cmath&gt; using namespace std; int main() { double x1,y1,x2,y2; double x3,y3,x4,y4; double m1,m2,n1,n2; cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;x3&gt;&gt;y3&gt;&gt;x4&gt;&gt;y4; m1=min(max(x1,x2),max(x3,x4)); n1=min(max(y1,y2),max(y3,y4)); m2=max(min(x1,x2),min(x3,x4)); n2=max(min(y1,y2),min(y3,y4)); if(m1&gt;m2&amp;&amp;n1&gt;n2) { cout&lt;&lt;(m1-m2)*(n1-n2)&lt;&lt;endl; } else cout&lt;&lt;\"0.00\"&lt;&lt;endl; r....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440043701.html","articleImg1URL":"https://img.hacpai.com/bing/20190211.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"LIS（最长上升子序列）","articleAbstractText":"方法一： dp 动态规划 状态设计：dp[i]代表以 a[i]结尾的 LIS 的长度 状态转移：dp[i]=max(dp[i], dp[j]+1) (0&lt;=j&lt; i, a[j]&lt; a[i]) 时间复杂度：O(N^2) 例题：https://blog.csdn.net/y201619819/article/details/78354348 方法二：贪心 + 二分 时间复杂度 Nlog(N) a[i]表示第 i 个数据。 dp[i]表示表示长度为 i+1 的 LIS 结尾元素的最小值。 利用贪心的思想，对于一个上升子序列，显然当前最后一个元素越小，越有利于添加新的元素，这样 LIS 长度自然更长。 因此，我们只需要维护 dp 数组，其表示的就是长度为 i+1 的 LIS 结尾元素的最小值，保证每一位都是最小值，这样子 dp 数组的长度就是 LIS 的长度。 dp 数组具体维护过程同样举例讲解更为清晰。 同样对于序列 a(1, 7, 3, 5, 9, 4, 8)，dp 的变化过程如下： dp[0] = a[0] = 1，长度为 1 的 LIS 结尾元素的最小值自然没得挑，就....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575436974755.html","articleImg1URL":"https://img.hacpai.com/bing/20180917.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"容斥定理","articleAbstractText":"要计算几个集合并集的大小，我们要先将所有单个集合的大小计算出来，然后减去所有两个集合相交的部分，再加回所有三个集合相交的部分，再减去所有四个集合相交的部分，依此类推，一直计算到所有集合相交的部分。 简单来说，就是奇加偶减。  举个例子： 求 1~n 中多少个数不是 2,3,5,7 的倍数，当 n=10,结果只有 1 一个数。 #include&lt;iostream&gt; using namespace std; int main() { int n; cin&gt;&gt;n; int ans=n-(n/2+n/3+n/5+n/7)+(n/2/3+n/2/5+n/2/7+n/3/5+n/3/7+n/5/7)-(n/2/3/5+n/2/3/7+n/3/5/7+n/2/5/7)+n/2/3/5/7; //ans=n-(n/2+n/3+n/5+n/7)+(n/6+n/10+n/14+n/15+n/21+n/35)-(n/30+n/42+n/105+n/70)+n/210  cout&lt;&lt;ans&lt;&lt;endl; return 0; }  例子 2： 题目描述： V_Dr....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440265389.html","articleImg1URL":"https://img.hacpai.com/file/2019/12/20190402164825432-bffcedb6.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}