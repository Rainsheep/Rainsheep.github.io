{"relevantArticles":[{"articleTitle":"微信小程序学习笔记","articleAbstractText":"1. 基础知识   小程序提供了自己的视图层描述语言 WXML 和 WXSS，以及 JavaScript，并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。   小程序文件结构和传统web对比    结构 传统web 微信小程序     结构 HTML WXML   样式 CSS WXSS   逻辑 Javascript Javascript   配置 无 JSON      项目的基本目录：   全局配置：根目录下 app.json 文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。  pages 字段：用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。 window 字段：定义小程序所有页面的顶部背景颜色，文字颜色定义等。  navigationBarBackgroundColor :导航栏背景颜色，如 #000000 navigationBarTextStyle : 导航栏标题颜色，仅支持 black / white navigationBarTitleText ....","articleStatus":0,"articlePermalink":"/articles/2020/03/27/1585322624228.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-26+20:16:28+p_2020032620241624SS.png?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Vue 学习笔记","articleAbstractText":"1. VueJS 概述与快速入门   Vue.js 是一个构建数据驱动的 web 界面的渐进式框架。   MVVM 模式：Model-View-ViewModel，MVVM 就是将其中的 View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。   Vue.js 是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是MVVM 中的 VM，也就是 ViewModel。ViewModel 负责连接 View 和 Model，保证视图和数据的一致性。   快速入门 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;快速入门&lt;/title&gt; &lt;script src=\"js/vuejs-2.5.16.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt; {{message}}&lt;!--Vue的插值表....","articleStatus":0,"articlePermalink":"/articles/2020/03/18/1584528972534.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-16+16:47:59+331769-20180909094731362-16918169.png?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"ssm 整合","articleAbstractText":"1. 搭建整合环境  采用 XML+ 注解的方式进行整合 整合思路：  先搭建整合环境 再把 Spring 配置搭建完成 再使用 Spring 整合 SpringMVC 框架 最后使用 Spring 整合 MyBatis 框架   创建数据库和表结构 create database ssm; use ssm; create table account( id int primary key auto_increment, name varchar(20), money double );   Maven 坐标 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4....","articleStatus":0,"articlePermalink":"/articles/2020/03/11/1583867371280.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-11+01:06:38+02.bmp?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"SpringMVC 学习笔记","articleAbstractText":"1. SpringMVC 基础   SpringMVC 在 在 三层架构的位置   SpringMVC 的优势  清晰的角色划分：  前端控制器（DispatcherServlet） 请求到处理器映射（HandlerMapping） 处理器适配器（HandlerAdapter） 视图解析器（ViewResolver） 处理器或页面控制器（Controller） 验证器（ Validator） 命令对象（Command 请求参数绑定到的对象就叫命令对象） 表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。   分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。 由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。 和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。 可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。 可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。 功能强大的数据验证、格式化、绑定机制。 利用 Spring 提供的....","articleStatus":0,"articlePermalink":"/articles/2020/03/10/1583771477763.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-04+13:26:52+01%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}