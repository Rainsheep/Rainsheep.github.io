{"relevantArticles":[{"articleTitle":"IDAE记录","articleAbstractText":"快捷键 参考链接： Idea 快捷键大全    快捷键 功能     Ctrl+Y 删除光标所在行   Ctrl+D 复制光标所在行，插入光标位置下面   Ctrl+/ 单行注释，再按取消注释   Ctrl+Space 基本代码提示   Ctrl+O 覆盖重写方法   Ctrl+P 方法参数提示   Ctrl+N 查找类   Ctrl+左键 跳转到声明或用法   Ctrl+F12 显示当前文件的结构   Alt+Enter 导入包，自动修正代码   Alt+Insert 自动生成代码，toString，get，set 等方法   Shift+F6 重命名变量(所有此变量)   Alt+Shift+上下箭头 移动当前代码行   Ctrl+Shift+Space 智能代码提示   Ctrl+Shift+/ 注释选中代码，多行注释，再按取消注释   Ctrl + Shift + Enter 自动结束代码，行末自动添加分号   Ctrl + Alt + O 优化导入的类，可以对当前文件和整个包目录使用   Ctrl + Alt + 左键 跳转到实现   Ctrl+Alt+L 格式化代码   输....","articleStatus":0,"articlePermalink":"/articles/2020/01/07/1578385176961.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-02-16+13:28:06+p_20200216012802.png?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"容斥定理","articleAbstractText":"要计算几个集合并集的大小，我们要先将所有单个集合的大小计算出来，然后减去所有两个集合相交的部分，再加回所有三个集合相交的部分，再减去所有四个集合相交的部分，依此类推，一直计算到所有集合相交的部分。 简单来说，就是奇加偶减。  举个例子： 求 1~n 中多少个数不是 2,3,5,7 的倍数，当 n=10,结果只有 1 一个数。 #include&lt;iostream&gt; using namespace std; int main() { int n; cin&gt;&gt;n; int ans=n-(n/2+n/3+n/5+n/7)+(n/2/3+n/2/5+n/2/7+n/3/5+n/3/7+n/5/7)-(n/2/3/5+n/2/3/7+n/3/5/7+n/2/5/7)+n/2/3/5/7; //ans=n-(n/2+n/3+n/5+n/7)+(n/6+n/10+n/14+n/15+n/21+n/35)-(n/30+n/42+n/105+n/70)+n/210  cout&lt;&lt;ans&lt;&lt;endl; return 0; }  例子 2： 题目描述： V_Dr....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440265389.html","articleImg1URL":"https://img.hacpai.com/file/2019/12/20190402164825432-bffcedb6.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"JAVA正则表达式总结","articleAbstractText":"正则表达式匹配常用字符（只含常用）： 字符：   x 字符x   \\n 新行（换行）符 ('\\u000A')   \\t 制表符 ('\\u0009')  字符类：   [abc] a、b 或 c（简单类）   [^abc] 任何字符，除了 a、b 或 c（否定）   [a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围）   [a-d[m-p]] a 到 d 或 m 到 p：[a-dm-p]（并集） |   [a-z&amp;&amp;[def]] d、e 或 f（交集）   [a-z&amp;&amp;[^bc]] a 到 z，除了 b 和 c：[ad-z]（减去）   [a-z&amp;&amp;[^m-p]] a 到 z，而非 m 到 p：[a-lq-z]（减去）  预定义字符类：   . 任何字符（与行结束符可能匹配也可能不匹配）   \\d 数字：[0-9]   \\D 非数字： [^0-9]   \\s 空白字符：[ \\t\\n\\x0B\\f\\r]   \\S 非空白字符：[^\\s]   \\w 单词字符：[a-zA-Z_0-9]    \\W 非单词字符：[^\\w]  边....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575442507093.html","articleImg1URL":"https://img.hacpai.com/bing/20181229.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"POJ 3630 TRIE树","articleAbstractText":"题目大意：一个数不能是另一个数开头的子串，trie 树 暴力解法：然后细细一想，既然是判断相同串是否存在，那我直接将串进行排序将第一位相同的串排在一起再进行判断操作，就大大优化了搜索时间。 #include&lt;iostream&gt; #include&lt;cstdio&gt; #include&lt;cstring&gt; #include&lt;string&gt; #include&lt;algorithm&gt; using namespace std; string s[100005]; int main() { char p[12]; int t,flag=0,n,i,j; scanf(\"%d\",&amp;t); while(t--) { flag=0; scanf(\"%d\",&amp;n); for(int i=0;i&lt;n;i++) { scanf(\"%s\",&amp;p); s[i]=p; } sort(s,s+n); for(int i=1;i&lt;n;i++) { if(s[i].size()&gt;s[i-1].size()) { for(j=0;j....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575379303995.html","articleImg1URL":"https://img.hacpai.com/bing/20190302.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Emmet常用语法","articleAbstractText":"官方文档：https://docs.emmet.io/cheat-sheet  HTML 初始结构(!) 先输入！然后按 tab 生成基础结构  id(#)和 class(.)  div#test &lt;div id=\"test\"&gt;&lt;/div&gt; div.test &lt;div class=\"test\"&gt;&lt;/div&gt; form#search.wide &lt;form id=\"search\" class=\"wide\"&gt;&lt;/form&gt; p.class1.class2.class3 &lt;p class=\"class1 class2 class3\"&gt;&lt;/p&gt;  子节点(&gt;)，兄弟结点(+)，上级节点(^)  div&gt;ul&gt;li&gt;p  &lt;div&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;   div+ul+p  &lt;div&gt;&lt;/div&gt; &lt;....","articleStatus":0,"articlePermalink":"/articles/2020/01/01/1577858373027.html","articleImg1URL":"https://img.hacpai.com/file/2020/01/p20200101013412-55772897.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}