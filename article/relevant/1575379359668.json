{"relevantArticles":[{"articleTitle":"poj 2513 trie树","articleAbstractText":"题目大意： 输入木棒两端的颜色，一端颜色相同的木棒才能连接，问最后能不能连接成一根木棒 思路： 欧拉回路：如果图 G 中的一个路径包括每个边恰好一次，则该路径称为欧拉路径，如果一个回路是欧拉路径，则称为欧拉回路 无向图存在欧拉回路的充要条件 一个无向图存在欧拉回路，当且仅当该图所有顶点度数都为偶数，且该图是连通图。 有向图存在欧拉回路的充要条件 一个有向图存在欧拉回路，所有顶点的入度等于出度且该图是连通图。 本题用并查集判断是不是连通图，用 TRIE 树对应颜色相应的编号（map 超时） Sample Input blue red red violet cyan blue blue magenta magenta cyan Sample Output Possible #include &lt;iostream&gt; #include &lt;stdio.h&gt; #include &lt;algorithm&gt; #include &lt;string&gt; #include &lt;string.h&gt; #include &lt;queue&gt; using name....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575379181032.html","articleImg1URL":"https://img.hacpai.com/bing/20180922.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"POJ 1182 食物链 并查集","articleAbstractText":"题目链接：点击打开链接 思路：并查集判断是否有关系 类型一个三种 #include&lt;iostream&gt; #include&lt;string&gt; using namespace std; const int N = 500005; int father[N]; int sum = 0; int d[N] = { 0 };//代表与根节点的距离，有0,1,2三种 int n; int find(int x) {//find时更新距离  if (x != father[x]) { int pre = father[x]; father[x] = find(father[x]); d[x] += d[pre]; d[x] %= 3; } return father[x]; } int judge(int k, int x, int y) { int a = find(x); int b = find(y); if (a == b) { if (k == 1 &amp;&amp; d[x] != d[y])return 0; if (k == 2 &amp;&amp; d[x]....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575379403167.html","articleImg1URL":"https://img.hacpai.com/bing/20190610.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"矩形的交面积","articleAbstractText":"矩形边平行 X 轴或 Y 轴 输入：矩形某对角线上两个点 输出：交面积 #include&lt;iostream&gt; #include&lt;cmath&gt; using namespace std; int main() { double x1,y1,x2,y2; double x3,y3,x4,y4; double m1,m2,n1,n2; cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;x3&gt;&gt;y3&gt;&gt;x4&gt;&gt;y4; m1=min(max(x1,x2),max(x3,x4)); n1=min(max(y1,y2),max(y3,y4)); m2=max(min(x1,x2),min(x3,x4)); n2=max(min(y1,y2),min(y3,y4)); if(m1&gt;m2&amp;&amp;n1&gt;n2) { cout&lt;&lt;(m1-m2)*(n1-n2)&lt;&lt;endl; } else cout&lt;&lt;\"0.00\"&lt;&lt;endl; r....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440043701.html","articleImg1URL":"https://img.hacpai.com/bing/20190211.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"素数判断","articleAbstractText":"bool is_prime(int u) { if (u == 0 || u == 1)return false; if (u == 2)return true; if (u % 2 == 0)return false; for (int i = 3; i &lt;= sqrt(u); i += 2) if (u%i == 0)return false; return true; }","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440129024.html","articleImg1URL":"https://img.hacpai.com/bing/20190312.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"分解质因子","articleAbstractText":"任何一个合数可以分解为几个质数的乘积，这些质数也必然是这个合数的约数。 超时模板： #include&lt;bits/stdc++.h&gt; using namespace std; vector&lt;int&gt; fun(int n) { vector&lt;int&gt; v; for (int i = 2; i &lt;= n; i++) { while (n%i == 0) { n /= i; v.push_back(i); } } return v; } int main() { int n; cin &gt;&gt; n; vector&lt;int&gt; v = fun(n); for (auto it = v.begin(); it != v.end(); it++) { cout &lt;&lt; *it &lt;&lt; \" \"; } }  优化模板： #include&lt;iostream&gt; #include&lt;vector&gt; #include&lt;cmath&gt; using namespace std; vector&lt;int....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440099127.html","articleImg1URL":"https://img.hacpai.com/bing/20180317.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}