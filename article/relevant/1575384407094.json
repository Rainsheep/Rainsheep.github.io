{"relevantArticles":[{"articleTitle":"HUD-1060 Leftmost Digit","articleAbstractText":"题目链接：HDU\u20141060 对一个数 num 可写为 num=a10^n , 即科学计数法，使 a 的整数部分即为 num 的最高位数字 numnum=10n * a 这里的 n 与上面的 n 不等 两边取对数： numlg(num) = n + lg(a); 因为 a&lt;10，所以 0&lt;lg(a)&lt;1 令 x=n+lg(a); 则 n 为 x 的整数部分，lg(a)为 x 的小数部分 又 x=num*lg(num); a=10(x-n) = 10(x-int(x))) 再取 a 的整数部分即得 num 的最高位 总结：遇到大数无法处理的时候善于用 logn(x);log(x)表示以 e 为底，logn(x)表示自定义底数 #include&lt;iostream&gt; #include&lt;math.h&gt; using namespace std; int main() { int num,T,a; double n; cin&gt;&gt;T; while(T--) { cin&gt;&gt;num; n=num*log10(num);//num最大10位，....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575347380440.html","articleImg1URL":"https://img.hacpai.com/bing/20181220.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"容斥定理","articleAbstractText":"要计算几个集合并集的大小，我们要先将所有单个集合的大小计算出来，然后减去所有两个集合相交的部分，再加回所有三个集合相交的部分，再减去所有四个集合相交的部分，依此类推，一直计算到所有集合相交的部分。 简单来说，就是奇加偶减。  举个例子： 求 1~n 中多少个数不是 2,3,5,7 的倍数，当 n=10,结果只有 1 一个数。 #include&lt;iostream&gt; using namespace std; int main() { int n; cin&gt;&gt;n; int ans=n-(n/2+n/3+n/5+n/7)+(n/2/3+n/2/5+n/2/7+n/3/5+n/3/7+n/5/7)-(n/2/3/5+n/2/3/7+n/3/5/7+n/2/5/7)+n/2/3/5/7; //ans=n-(n/2+n/3+n/5+n/7)+(n/6+n/10+n/14+n/15+n/21+n/35)-(n/30+n/42+n/105+n/70)+n/210  cout&lt;&lt;ans&lt;&lt;endl; return 0; }  例子 2： 题目描述： V_Dr....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440265389.html","articleImg1URL":"https://img.hacpai.com/file/2019/12/20190402164825432-bffcedb6.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"分解质因子","articleAbstractText":"任何一个合数可以分解为几个质数的乘积，这些质数也必然是这个合数的约数。 超时模板： #include&lt;bits/stdc++.h&gt; using namespace std; vector&lt;int&gt; fun(int n) { vector&lt;int&gt; v; for (int i = 2; i &lt;= n; i++) { while (n%i == 0) { n /= i; v.push_back(i); } } return v; } int main() { int n; cin &gt;&gt; n; vector&lt;int&gt; v = fun(n); for (auto it = v.begin(); it != v.end(); it++) { cout &lt;&lt; *it &lt;&lt; \" \"; } }  优化模板： #include&lt;iostream&gt; #include&lt;vector&gt; #include&lt;cmath&gt; using namespace std; vector&lt;int....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440099127.html","articleImg1URL":"https://img.hacpai.com/bing/20180317.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"HDU-1005 Number Sequence 循环结","articleAbstractText":"一开始的思路是遇到 11 就开始循环，后来发现，发现当 A=5555，B=666666 时数列是 1142142142142，这种情况不是以 11 开始循环的，依然超时就罢了，关按 11 判断的话就错了。因为两个结果都一定是 0 到 6 之间的数，所以一定会循环，而且循环节不会超过 7*7=49。（因为前面 2 个数若相同，则第三个之后的数必相同，而在 49 内必能找到 2 个相邻的数在前面出现过）。 题目链接：HDU-1005 #include&lt;stdio.h&gt; int main() { int i,a,b,m,n,l,f[50]; while(~scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;n)&amp;&amp;n) { f[1]=f[2]=1; if(n&lt;=2)f[n]=1; if(n&gt;2) { while(n&gt;49) { n=n-49; } for(i=3;i&lt;=n;i++) { f[i]=(a*f[i-1]+b*f[i-2])%7; } } printf(\"%d\\n\",f[n]); } return 0; }","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575347335905.html","articleImg1URL":"https://img.hacpai.com/bing/20190508.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"素数判断","articleAbstractText":"bool is_prime(int u) { if (u == 0 || u == 1)return false; if (u == 2)return true; if (u % 2 == 0)return false; for (int i = 3; i &lt;= sqrt(u); i += 2) if (u%i == 0)return false; return true; }","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440129024.html","articleImg1URL":"https://img.hacpai.com/bing/20190312.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}