{"relevantArticles":[{"articleTitle":"ssm 整合","articleAbstractText":"1. 搭建整合环境  采用 XML+ 注解的方式进行整合 整合思路：  先搭建整合环境 再把 Spring 配置搭建完成 再使用 Spring 整合 SpringMVC 框架 最后使用 Spring 整合 MyBatis 框架   创建数据库和表结构 create database ssm; use ssm; create table account( id int primary key auto_increment, name varchar(20), money double );   Maven 坐标 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4....","articleStatus":0,"articlePermalink":"/articles/2020/03/11/1583867371280.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-11+01:06:38+02.bmp?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring 学习笔记","articleAbstractText":"1. Spring 框架了解  Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架。 Spring 的优势  方便解耦，简化开发 通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。 AOP 编程的支持 通过 Spring 的 AOP 功能，方便进行面向切面的编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付。 声明式事务的支持 可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开....","articleStatus":0,"articlePermalink":"/articles/2020/03/08/1583653357274.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-06+15:46:26+spring-overview.png?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"微信小程序学习笔记","articleAbstractText":"1. 基础知识   小程序提供了自己的视图层描述语言 WXML 和 WXSS，以及 JavaScript，并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。   小程序文件结构和传统web对比    结构 传统web 微信小程序     结构 HTML WXML   样式 CSS WXSS   逻辑 Javascript Javascript   配置 无 JSON      项目的基本目录：   全局配置：根目录下 app.json 文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。  pages 字段：用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。 window 字段：定义小程序所有页面的顶部背景颜色，文字颜色定义等。  navigationBarBackgroundColor :导航栏背景颜色，如 #000000 navigationBarTextStyle : 导航栏标题颜色，仅支持 black / white navigationBarTitleText ....","articleStatus":0,"articlePermalink":"/articles/2020/03/27/1585322624228.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-26+20:16:28+p_2020032620241624SS.png?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Java 格式化显示金额","articleAbstractText":"DecimalFormat decimalFormat = new DecimalFormat(\"###,###.00\"); System.out.println(decimalFormat.format(1002200999.22323)); //1,002,200,999.22","articleStatus":0,"articlePermalink":"/articles/2020/03/31/1585591249751.html","articleImg1URL":"https://img.hacpai.com/bing/20180416.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"SpringMVC 学习笔记","articleAbstractText":"1. SpringMVC 基础   SpringMVC 在 在 三层架构的位置   SpringMVC 的优势  清晰的角色划分：  前端控制器（DispatcherServlet） 请求到处理器映射（HandlerMapping） 处理器适配器（HandlerAdapter） 视图解析器（ViewResolver） 处理器或页面控制器（Controller） 验证器（ Validator） 命令对象（Command 请求参数绑定到的对象就叫命令对象） 表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。   分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。 由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。 和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。 可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。 可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。 功能强大的数据验证、格式化、绑定机制。 利用 Spring 提供的....","articleStatus":0,"articlePermalink":"/articles/2020/03/10/1583771477763.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-04+13:26:52+01%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}