{"relevantArticles":[{"articleTitle":"Ajax 学习笔记","articleAbstractText":"1. AJAX 基础知识   概念：ASynchronous JavaScript And XML，异步的 JavaScript 和 XML   异步和同步：在客户端和服务器端相互通信的基础上  同步：客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。 异步：客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。      AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页页面。    原生的 JS 实现方式（了解） &lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt; &lt;html lang=\"zh_CN\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;T....","articleStatus":0,"articlePermalink":"/articles/2020/02/29/1582959858110.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-02-29+02:04:54+1.%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5.bmp?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Vue 学习笔记","articleAbstractText":"1. VueJS 概述与快速入门   Vue.js 是一个构建数据驱动的 web 界面的渐进式框架。   MVVM 模式：Model-View-ViewModel，MVVM 就是将其中的 View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。   Vue.js 是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是MVVM 中的 VM，也就是 ViewModel。ViewModel 负责连接 View 和 Model，保证视图和数据的一致性。   快速入门 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;快速入门&lt;/title&gt; &lt;script src=\"js/vuejs-2.5.16.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt; {{message}}&lt;!--Vue的插值表....","articleStatus":0,"articlePermalink":"/articles/2020/03/18/1584528972534.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-16+16:47:59+331769-20180909094731362-16918169.png?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"ssm 整合","articleAbstractText":"1. 搭建整合环境  采用 XML+ 注解的方式进行整合 整合思路：  先搭建整合环境 再把 Spring 配置搭建完成 再使用 Spring 整合 SpringMVC 框架 最后使用 Spring 整合 MyBatis 框架   创建数据库和表结构 create database ssm; use ssm; create table account( id int primary key auto_increment, name varchar(20), money double );   Maven 坐标 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4....","articleStatus":0,"articlePermalink":"/articles/2020/03/11/1583867371280.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-11+01:06:38+02.bmp?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"flex布局","articleAbstractText":"参考： 30 分钟学会 Flex 布局 flex 布局 1. flex 布局 在传统网页开发，我们用的是盒模型，通过 display:inline | block | inline-block、 position、float 来实现布局，缺乏灵活性且有些适配效果难以实现。比如像下面这种常见的信息列表，要求内容高度不确定下保持垂直居中： 常见的信息列表排版方式 这种情况下，我们更建议用 flex 布局。 在开始介绍 flex 之前，为了表述方便，我们约定以下术语：采用 flex 布局的元素，简称为\u201c容器\u201d，在代码示例中以 container 表示容器的类名。容器内的元素简称为\u201c项目\u201d，在代码示例中以 item 表示项目的类名。 container 容器和 item 项目 2. 基本概念 flex 的目的是提供一种更灵活的布局模型，使容器能通过改变里面项目的高宽、顺序，来对可用空间实现最佳的填充，方便适配不同大小的内容区域。 在不固定高度信息的例子中，我们只需要在容器中设置以下两个属性即可实现内容不确定下的垂直居中。 1.container { 2 display: flex; 3 fle....","articleStatus":0,"articlePermalink":"/articles/2020/07/26/1595731170747.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-07-20+22:59:52+p_2020072022223122SS.gif?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Git 学习笔记","articleAbstractText":"1. Git 基础  Git 工作流程  从远程仓库中克隆 Git 资源作为本地仓库。 从本地仓库中 checkout 代码然后进行代码修改 在提交前先将代码提交到暂存区。 提交修改。提交到本地仓库。本地仓库中保存修改的各个历史版本。 在修改完成后，需要和团队成员共享代码时，可以将代码 push 到远程仓库。     2. 使用 Git 管理文件版本  版本库：版本库又名仓库，英文名 repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除，Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以\u201c还原\u201d。由于 Git 是分布式版本管理工具，所以 Git 在不需要联网的情况下也具有完整的版本管理能力。 创建版本库：git init 版本库：.git 目录就是版本库，将来文件都需要保存到版本库中。 工作目录：包含 .git 目录的目录，也就是 .git 目录的上一级目录就是工作目录。只有工作目录中的文件才能保存到版本库中。 Git 的版本库里存了很多东西，其中最重要的就是称为 stage（或者叫 index）的暂存....","articleStatus":0,"articlePermalink":"/articles/2020/03/13/1584091376522.html","articleImg1URL":"https://raw.githubusercontent.com/Rainsheep/pic-bed/master/img/2020-03-09+13:46:30+git.png?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}