{"relevantArticles":[{"articleTitle":"阶乘末尾0的个数","articleAbstractText":"题目描述 求：S=1！×2！×3！×...× n！的末尾有多少个零。 输入描述： 输入数据共一行，一个正整数 n，意义如\u201c问题描述\u201d。 输出描述： 输出一行描述答案： 一个正整数 k，表示 S 的末尾有 k 个 0 示例 1 输入 10 输出 7 说明 对于 100% 的数据，1≤ n≤100,000,000 思路：观察这个表达式我们发现 0 的个数即为该表达式的最终结果含有 10 的几次方的因子。我们就联想到了拆素数。并且 10 的 n 次方都有一个通性：质因子只有 2 和 5。显而易见，最终结果中质因子 2 的个数远远大于 5 的个数。所以这道题就是找因子 5 的个数。由于是阶乘的连乘，后一个数 a 都比前一个数(a-1)多乘了个 a。我们的目标是找 5 的个数，也就是每五个一循环，更新每次乘上的 5 的个数。 #include&lt;iostream&gt; using namespace std; int main() { int n; long long ans = 0; cin &gt;&gt; n; for (int i = 1; i &lt;= n; i++) { in....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575380460268.html","articleImg1URL":"https://img.hacpai.com/bing/20190513.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"莫队算法 牛客多校赛题","articleAbstractText":"题目描述 Given a sequence of integers a 1 , a 2 , ..., a n and q pairs of integers (l 1 , r 1 ), (l 2 , r 2 ), ..., (l q , r q ), find count(l 1 , r 1 ), count(l 2 , r 2 ), ..., count(l q , r q ) where count(i, j) is the number of different integers among a 1 , a 2 , ..., a i , a j , a j + 1 , ..., a n . 输入描述： The input consists of several test cases and is terminated by end-of-file. The first line of each test cases contains two integers n and q. The second line contains n integers a 1 , a 2 , ...,....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575439848633.html","articleImg1URL":"https://img.hacpai.com/bing/20171129.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"组合数C(n,m)的计算","articleAbstractText":"C(n,m)的计算方式： 1.公式：C(n,m) = n!/((n-m)! * m!)，在算法上较难实现，阶乘很快会爆 long long 2.递推：C(n,m) = C(n-1,m-1) + C(n-1,m) 在算法上当然会采用第二种方式计算，而且因为 C(n,m)本身值很大，所以大多数碰见它的情况会取模 #include&lt;iostream&gt; #define MOD 1000000007 using namespace std; const int N = 10005; long long c[N][N]; long long C(int i, int j) { if (i == j) return c[i][j] = 1; if (j == 0) return c[i][j] = 1; if (j == 1) return c[i][j] = i; if (c[i][j]) return c[i][j]; return c[i][j] = (C(i - 1, j - 1) % MOD + C(i - 1, j) % MOD) % MOD;//不需取模时把MOD去掉 } ....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575379716365.html","articleImg1URL":"https://img.hacpai.com/bing/20191106.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"容斥定理","articleAbstractText":"要计算几个集合并集的大小，我们要先将所有单个集合的大小计算出来，然后减去所有两个集合相交的部分，再加回所有三个集合相交的部分，再减去所有四个集合相交的部分，依此类推，一直计算到所有集合相交的部分。 简单来说，就是奇加偶减。  举个例子： 求 1~n 中多少个数不是 2,3,5,7 的倍数，当 n=10,结果只有 1 一个数。 #include&lt;iostream&gt; using namespace std; int main() { int n; cin&gt;&gt;n; int ans=n-(n/2+n/3+n/5+n/7)+(n/2/3+n/2/5+n/2/7+n/3/5+n/3/7+n/5/7)-(n/2/3/5+n/2/3/7+n/3/5/7+n/2/5/7)+n/2/3/5/7; //ans=n-(n/2+n/3+n/5+n/7)+(n/6+n/10+n/14+n/15+n/21+n/35)-(n/30+n/42+n/105+n/70)+n/210  cout&lt;&lt;ans&lt;&lt;endl; return 0; }  例子 2： 题目描述： V_Dr....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440265389.html","articleImg1URL":"https://img.hacpai.com/file/2019/12/20190402164825432-bffcedb6.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"素数判断","articleAbstractText":"bool is_prime(int u) { if (u == 0 || u == 1)return false; if (u == 2)return true; if (u % 2 == 0)return false; for (int i = 3; i &lt;= sqrt(u); i += 2) if (u%i == 0)return false; return true; }","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440129024.html","articleImg1URL":"https://img.hacpai.com/bing/20190312.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}