{"relevantArticles":[{"articleTitle":"拦截导弹（规律：下降子序列的个数等于最长上升子序列的长度）","articleAbstractText":"问题描述 　　某国为了防御敌国的导弹袭击，发展出一种导弹 拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的 导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。 　　输入导弹依次飞来的高度（雷达给出的高度数据是不大于 30000 的正整数），计算这套系统最多能拦截多少导弹，如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。 输入格式 　　一行，为导弹依次飞来的高度 输出格式 　　两行，分别是最多能拦截的导弹数与要拦截所有导弹最少要配备的系统数 样例输入 389 207 155 300 299 170 158 65 样例输出 6 2 规律：下降子序列的个数等于最长上升子序列的长度 #include &lt;iostream&gt;  using namespace std; int main() { int a[1005]; int d[1005]; int i=1; while(cin&gt;&gt;a[i]) { i++; } int n=i; int ma....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575376746513.html","articleImg1URL":"https://img.hacpai.com/bing/20190207.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"容斥定理","articleAbstractText":"要计算几个集合并集的大小，我们要先将所有单个集合的大小计算出来，然后减去所有两个集合相交的部分，再加回所有三个集合相交的部分，再减去所有四个集合相交的部分，依此类推，一直计算到所有集合相交的部分。 简单来说，就是奇加偶减。  举个例子： 求 1~n 中多少个数不是 2,3,5,7 的倍数，当 n=10,结果只有 1 一个数。 #include&lt;iostream&gt; using namespace std; int main() { int n; cin&gt;&gt;n; int ans=n-(n/2+n/3+n/5+n/7)+(n/2/3+n/2/5+n/2/7+n/3/5+n/3/7+n/5/7)-(n/2/3/5+n/2/3/7+n/3/5/7+n/2/5/7)+n/2/3/5/7; //ans=n-(n/2+n/3+n/5+n/7)+(n/6+n/10+n/14+n/15+n/21+n/35)-(n/30+n/42+n/105+n/70)+n/210  cout&lt;&lt;ans&lt;&lt;endl; return 0; }  例子 2： 题目描述： V_Dr....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440265389.html","articleImg1URL":"https://img.hacpai.com/file/2019/12/20190402164825432-bffcedb6.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"分解质因子","articleAbstractText":"任何一个合数可以分解为几个质数的乘积，这些质数也必然是这个合数的约数。 超时模板： #include&lt;bits/stdc++.h&gt; using namespace std; vector&lt;int&gt; fun(int n) { vector&lt;int&gt; v; for (int i = 2; i &lt;= n; i++) { while (n%i == 0) { n /= i; v.push_back(i); } } return v; } int main() { int n; cin &gt;&gt; n; vector&lt;int&gt; v = fun(n); for (auto it = v.begin(); it != v.end(); it++) { cout &lt;&lt; *it &lt;&lt; \" \"; } }  优化模板： #include&lt;iostream&gt; #include&lt;vector&gt; #include&lt;cmath&gt; using namespace std; vector&lt;int....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575440099127.html","articleImg1URL":"https://img.hacpai.com/bing/20180317.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"背包模板","articleAbstractText":"模板 /** * 多重背包： * 有N种物品和一个容量为 V的背包。第i种物品最多有 num[i]件可用， * 每件耗费的空间是C[i]，价值是W[i]。 * 求解将哪些物品装入背包可使这些物品的耗费的空间总和不超过背包容量，且价值总和最大。 */ #include &lt;iostream&gt; #include &lt;cstring&gt; #include &lt;algorithm&gt; using namespace std; #define maxn 100005 int c[maxn], w[maxn], num[maxn];//c:费用 w:价值 num:数量 int dp[maxn]; //当前位置符合题意的最优解 int V; //V:总容量  //01背包 void ZeroOnePack(int c, int w) { for (int v = V; v &gt;= c; v--) { dp[v] = max(dp[v], dp[v - c] + w); } } //完全背包 void CompletePack(int c, int w) { for (i....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575375623459.html","articleImg1URL":"https://img.hacpai.com/bing/20190928.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"hdu-2546 饭卡","articleAbstractText":"题目链接：hdu-2546 思路：DP[i][j]存的是 j 价格买 i 个物品最贵的价格，然后把二维变一维，第二层循环从后向前，依次覆盖上一层的 dp #include&lt;iostream&gt; #include&lt;algorithm&gt; #include&lt;cstring&gt; using namespace std; int dp[1005];//dp存的J价格在0~i物品中可以购买到的最大价格 int main() { int money,i,j,k,m,n,s[1005],t,temp,end,maxt,sum; while(cin&gt;&gt;n,n) { memset(dp,0,sizeof(dp)); for(i=1;i&lt;=n;i++) { cin&gt;&gt;s[i]; } sort(s+1,s+1+n); cin&gt;&gt;money; if(money&lt;5)//小于5元，直接输出  { end=money; } else { money=money-5;//5元买最贵的  for(i=1;i&lt;=n-1;i++) { f....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575374076393.html","articleImg1URL":"https://img.hacpai.com/bing/20190522.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}