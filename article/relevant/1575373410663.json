{"relevantArticles":[{"articleTitle":"【C++】STL常用容器总结之六：基于deque的顺序容器适配器","articleAbstractText":"7、基于 deque 的顺序容器适配器 1、stack 的基本概念 Stack 即栈，允许新增元素、移除元素、取得最顶端元素。但除了最顶端外，没有任何其他方法可以存取 stack 的其他元素，换言之，stack 不允许随机访问。可以将 stack 看成是封闭了一端开口的 deque。 将元素插入 stack 的操作称为 push，将元素弹出 stack 的操作称为 pop。Stack 所有元素的进出都必须符合\u201c后进先出\u201d的条件，只有 stack 顶端的元素，才有机会被外界取用。stack 不提供走访功能，也不提供迭代器。 2、堆栈类 stack 的成员函数 stack 实现后进先出的操作，使用时应包含头文件：#include&lt;stack&gt;。 声明一个 stack 对象：std::stack&lt;type,container&gt; stk; stack 模板类需要两个模板参数，一个是元素类型，一个容器类型，但只有元素类型是必要的。type 为堆栈操作的数据元素类型，container 为实现堆栈所用的容器类型，在不指定容器类型时，默认的容器类型为 deque，还可以为 s....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575383105229.html","articleImg1URL":"https://img.hacpai.com/file/2019/12/20160825111249201-a1f80a63.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"【C++】STL常用容器总结之四：链表list","articleAbstractText":"5、链表 list List 是每个节点包含前驱指针、后继指针和数据域三个部分的双向链表。List 不提供随机存取，访问元素需要按顺序走到需存取的元素，时间复杂度为 O(n)，在 list 的任何位置上执行插入或删除操作都非常迅速，只需在 list 内部调整一下指针。list 不仅是一个双向链表，而且还是一个环状双向链表。所以它只需要一个指针，便可以完整实现整个链表。（这里需要特别强调一下：list 到底是不是双向链表？有的书上说是，有的书上没说，所以大家注意一下，这里暂把 list 当作双向链表，等博主找到资料再做解释） 与向量 vector 相比，list 允许快速的插入和删除，且每次插入或删除一个元素，就配置或释放一个元素空间，对于任何位置的元素插入或元素移除，list 永远是常数时间。 List 不再能够像 vector 那样以普通指针作为迭代器，因为其节点不保证在储存空间中连续存在。list 迭代器必须有能力指向 list 的节点，并有能力进行正确的递增、递减、取值、成员存取等操作。所谓 list 迭代器正确的递增、递减、取值、成员取用操作是指，递增时指向下一个节点，递减时指....","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575382915839.html","articleImg1URL":"https://img.hacpai.com/bing/20180404.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"rope基本操作","articleAbstractText":"在 g++ 头文件中，&lt;ext/rope&gt; 中有成型的块状链表，在 using namespace __gnu_cxx;空间中，其操作十分方便。 基本操作： rope test; test.push_back(x);//在末尾添加 x test.insert(pos,x);//在 pos 插入 x　　 test.erase(pos,x);//从 pos 开始删除 x 个 test.copy(pos,len,x);//从 pos 开始到 pos+len 为止用 x 代替 test.replace(pos,x);//从 pos 开始换成 x test.substr(pos,x);//提取 pos 开始 x 个 test.at(x)/[x];//访问第 x 个元素 其算法复杂度 n*(n^0.5)，可以在很短的时间内实现快速的插入、删除和查找字符串，是一个很厉害的神器！","articleStatus":0,"articlePermalink":"/articles/2019/12/03/1575383226457.html","articleImg1URL":"https://img.hacpai.com/bing/20190504.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"JAVA正则表达式总结","articleAbstractText":"正则表达式匹配常用字符（只含常用）： 字符：   x 字符x   \\n 新行（换行）符 ('\\u000A')   \\t 制表符 ('\\u0009')  字符类：   [abc] a、b 或 c（简单类）   [^abc] 任何字符，除了 a、b 或 c（否定）   [a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围）   [a-d[m-p]] a 到 d 或 m 到 p：[a-dm-p]（并集） |   [a-z&amp;&amp;[def]] d、e 或 f（交集）   [a-z&amp;&amp;[^bc]] a 到 z，除了 b 和 c：[ad-z]（减去）   [a-z&amp;&amp;[^m-p]] a 到 z，而非 m 到 p：[a-lq-z]（减去）  预定义字符类：   . 任何字符（与行结束符可能匹配也可能不匹配）   \\d 数字：[0-9]   \\D 非数字： [^0-9]   \\s 空白字符：[ \\t\\n\\x0B\\f\\r]   \\S 非空白字符：[^\\s]   \\w 单词字符：[a-zA-Z_0-9]    \\W 非单词字符：[^\\w]  边....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575442507093.html","articleImg1URL":"https://img.hacpai.com/bing/20181229.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Java中List, Integer[], int[]的相互转换","articleAbstractText":"有时候 list和数组 int[]转换很麻烦。 List和 String[]也同理。难道每次非得写一个循环遍历吗？其实一步就可以搞定。 本文涉及到一些 Java8 的特性。如果没有接触过就先学会怎么用，然后再细细研究。 package package1; import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; import java.util.stream.Stream; public class Main { public static void main(String[] args) { int[] arr = {1, 2, 3, 4, 5}; // int[] 转 List&lt;Integer&gt;  List&lt;Integer&gt; list1 = Arrays.stream(arr).boxed().collect(Collectors.toList()); //1.调用Arrays.stream()将int[]变为IntStream流,注意不能用Stre....","articleStatus":0,"articlePermalink":"/articles/2019/12/04/1575442558951.html","articleImg1URL":"https://img.hacpai.com/bing/20180101.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}